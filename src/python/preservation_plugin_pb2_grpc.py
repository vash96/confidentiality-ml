# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import basic_types_pb2 as basic__types__pb2
import preservation_plugin_pb2 as preservation__plugin__pb2


class PreservationPluginStub(object):
    """PreservationPlugin service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Scramble = channel.unary_unary(
                '/PreservationPluginPackage.PreservationPlugin/Scramble',
                request_serializer=preservation__plugin__pb2.ToScramble.SerializeToString,
                response_deserializer=preservation__plugin__pb2.Scrambled.FromString,
                )
        self.DeScramble = channel.unary_unary(
                '/PreservationPluginPackage.PreservationPlugin/DeScramble',
                request_serializer=preservation__plugin__pb2.Scrambled.SerializeToString,
                response_deserializer=basic__types__pb2.NDArray.FromString,
                )


class PreservationPluginServicer(object):
    """PreservationPlugin service
    """

    def Scramble(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeScramble(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PreservationPluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Scramble': grpc.unary_unary_rpc_method_handler(
                    servicer.Scramble,
                    request_deserializer=preservation__plugin__pb2.ToScramble.FromString,
                    response_serializer=preservation__plugin__pb2.Scrambled.SerializeToString,
            ),
            'DeScramble': grpc.unary_unary_rpc_method_handler(
                    servicer.DeScramble,
                    request_deserializer=preservation__plugin__pb2.Scrambled.FromString,
                    response_serializer=basic__types__pb2.NDArray.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PreservationPluginPackage.PreservationPlugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PreservationPlugin(object):
    """PreservationPlugin service
    """

    @staticmethod
    def Scramble(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PreservationPluginPackage.PreservationPlugin/Scramble',
            preservation__plugin__pb2.ToScramble.SerializeToString,
            preservation__plugin__pb2.Scrambled.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeScramble(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PreservationPluginPackage.PreservationPlugin/DeScramble',
            preservation__plugin__pb2.Scrambled.SerializeToString,
            basic__types__pb2.NDArray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
